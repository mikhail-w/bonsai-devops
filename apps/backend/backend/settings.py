"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv
from storages.backends.s3boto3 import S3Boto3Storage

# Load environment variables from .env file
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "your-default-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() in ("true", "1")

# ALLOWED_HOSTS from environment or default to localhost
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# OpenAI API Key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Security Settings
SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "False").lower() in ("true", "1")
SESSION_COOKIE_SECURE = os.getenv("SESSION_COOKIE_SECURE", "False").lower() in ("true", "1")
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", "False").lower() in ("true", "1")
SECURE_BROWSER_XSS_FILTER = os.getenv("SECURE_BROWSER_XSS_FILTER", "False").lower() in ("true", "1")
SECURE_CONTENT_TYPE_NOSNIFF = os.getenv("SECURE_CONTENT_TYPE_NOSNIFF", "False").lower() in ("true", "1")
X_FRAME_OPTIONS = os.getenv("X_FRAME_OPTIONS", "DENY")

# Print initial configuration
print("\n=== Django Configuration ===")
print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "storages",  # Added for S3 storage
    "base",
    "blog",
    "chatbot",
]

# HAYSTACK_CONNECTIONS = {
#     "default": {
#         "ENGINE": "haystack.document_stores.in_memory.InMemoryDocumentStore",
#     }
# }

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Added for static files
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# S3 Configuration
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "us-east-1")
AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN")
AWS_QUERYSTRING_AUTH = False  # For public access to files
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

# Print S3 configuration
print("\n=== S3 Configuration ===")
print(f"AWS_STORAGE_BUCKET_NAME: {AWS_STORAGE_BUCKET_NAME}")
print(f"AWS_S3_REGION_NAME: {AWS_S3_REGION_NAME}")
print(f"AWS_S3_CUSTOM_DOMAIN: {AWS_S3_CUSTOM_DOMAIN}")


# Create custom storage classes
class MediaStorage(S3Boto3Storage):
    location = "media"
    file_overwrite = False

    def _save(self, name, content):
        print(f"\n=== MediaStorage Save ===")
        print(f"Saving file: {name}")
        print(f"Location: {self.location}")
        return super()._save(name, content)


class DebugMediaStorage(MediaStorage):
    def _save(self, name, content):
        """
        Enhanced debug version of MediaStorage that prints detailed information
        about file uploads\n\n======= WORKING ON LOCAL MACHINE.=======\n\n
        """
        print("\n=== Debug S3 Storage ===")
        print(f"Saving file: {name}")
        print(f"Content type: {getattr(content, 'content_type', 'unknown')}")
        print(f"Size: {getattr(content, 'size', 'unknown')}")
        print(f"Storage location: {self.location}")
        print(f"Full path: {os.path.join(self.location, name)}")
        try:
            result = super()._save(name, content)
            print(f"File saved successfully: {result}")
            print(f"Expected URL: {self.url(result)}")
            return result
        except Exception as e:
            print(f"Error saving file: {str(e)}")
            raise


class StaticStorage(S3Boto3Storage):
    location = "static"  # store files under 'static/' directory


# Storage configuration
if AWS_STORAGE_BUCKET_NAME:
    # Use S3 storage when AWS bucket is configured
    STORAGES = {
        "default": {
            "BACKEND": "backend.settings.DebugMediaStorage",
        },
        "staticfiles": {
            "BACKEND": "backend.settings.StaticStorage",
        },
    }
    
    # CloudFront/S3 URLs
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"
else:
    # Use local storage when AWS is not configured
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
    
    # Local URLs
    STATIC_URL = "/static/"
    MEDIA_URL = "/media/"

# Static and Media root directories
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_ROOT = BASE_DIR / "media"

# Print URL configurations
print("\n=== URL Configuration ===")
print(f"MEDIA_URL: {MEDIA_URL}")
print(f"STATIC_URL: {STATIC_URL}")


# REST framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

# CORS settings
# CORS_ORIGIN_ALLOW_ALL = True


# Uncomment and configure if you want to restrict allowed origins
CORS_ALLOWED_ORIGINS = [
    "https://mwbonsai.com",
    "https://www.mwbonsai.com",
    "https://d2v41dj0jm6bl1.cloudfront.net",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://mikhail-bonsai.s3-website-us-east-1.amazonaws.com",
    "http://mwbonsai.s3-website-us-east-1.amazonaws.com",
]

# Add CORS_ALLOW_CREDENTIALS if you're using cookies/sessions
CORS_ALLOW_CREDENTIALS = True

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "True").lower() in (
        "true",
        "1",
    )

print("\n=== Settings Loaded Successfully ===")
